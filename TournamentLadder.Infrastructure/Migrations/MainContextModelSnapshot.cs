// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TournamentLadder.Infrastructure.Context;

#nullable disable

namespace TournamentManager.Infrastructure.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.3");

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LadderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamScores")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LadderId");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Ladder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Ladder");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Member", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfUpdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TournamentId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfUpdate")
                        .HasColumnType("TEXT");

                    b.Property<int>("LadderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("TournamentEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TournamentStart")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LadderId")
                        .IsUnique();

                    b.ToTable("Tournament");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Game", b =>
                {
                    b.HasOne("TournamentManager.Infrastructure.Entities.Ladder", "Ladder")
                        .WithMany("Games")
                        .HasForeignKey("LadderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ladder");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Member", b =>
                {
                    b.HasOne("TournamentManager.Infrastructure.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Team", b =>
                {
                    b.HasOne("TournamentManager.Infrastructure.Entities.Tournament", "Tournament")
                        .WithMany("TournamentTeams")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Tournament", b =>
                {
                    b.HasOne("TournamentManager.Infrastructure.Entities.Ladder", "Ladder")
                        .WithOne("Tournament")
                        .HasForeignKey("TournamentManager.Infrastructure.Entities.Tournament", "LadderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ladder");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Ladder", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Tournament")
                        .IsRequired();
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Team", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("TournamentManager.Infrastructure.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
